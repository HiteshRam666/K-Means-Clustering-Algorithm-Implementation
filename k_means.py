# -*- coding: utf-8 -*-
"""K-Means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IedrR2hzZm96ir73ZpB9DSEdG4KE0w2Q

## **Import Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
import pandas as pd
import numpy as np
# %matplotlib inline

"""## **Create Data**"""

X, y = make_blobs(n_samples = 1000, centers = 3, n_features = 2, random_state = 42)

X.shape

plt.scatter(X[:, 0], X[:, 1])

"""## **Train Test Split**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)

"""##**KMeans**"""

from sklearn.cluster import KMeans

"""## **Manual Process**
## **Elbow method to select the K value**
"""

wcss = []
for k in range(1, 11):
  kmeans = KMeans(n_clusters = k, init = 'k-means++')
  kmeans.fit(X_train)
  wcss.append(kmeans.inertia_)

wcss

"""## **Plot the elbow curve**"""

plt.plot(range(1, 11), wcss)
plt.xticks(range(1, 11))
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters=3, init = 'k-means++')

"""####**Train Data**"""

y_labels = kmeans.fit_predict(X_train)

plt.scatter(X_train[:,0], X_train[:,1], c = y_labels)

"""####**Test Data**"""

y_test_label = kmeans.predict(X_test)

plt.scatter(X_test[:,0], X_test[:,1], c = y_test_label)

"""##**Knee Locator to find the K value**"""

!pip install kneed

from kneed import KneeLocator

kl = KneeLocator(range(1, 11), wcss, curve = 'convex', direction = 'decreasing')
kl.elbow

"""### **Performance Metrics**"""

# silhouette_score
from sklearn.metrics import silhouette_score

silhouette_coefficient = []
for k in range(2, 11):
  kmeans = KMeans(n_clusters = k, init = 'k-means++')
  kmeans.fit(X_train)
  score = silhouette_score(X_train, kmeans.labels_)
  silhouette_coefficient.append(score)

plt.plot(range(2, 11), silhouette_coefficient)
plt.xticks(range(2, 11))
plt.xlabel('Number of Clusters')
plt.ylabel('silhouette_coefficient')
plt.show()

